# Secret template for MCP Image Generation Server
# This file contains templates for creating secrets. 
# DO NOT commit actual secret values to version control.

apiVersion: v1
kind: Secret
metadata:
  name: mcp-image-server-secrets
  labels:
    app: mcp-image-server
    component: config
type: Opaque
data:
  # S3/AWS Credentials (base64 encoded)
  # Use: echo -n "your-access-key" | base64
  aws_access_key_id: ""  # Base64 encoded AWS access key
  aws_secret_access_key: ""  # Base64 encoded AWS secret key

---
# Example with placeholder values (for documentation)
# Replace with actual base64-encoded values
apiVersion: v1
kind: Secret
metadata:
  name: mcp-image-server-secrets-example
  labels:
    app: mcp-image-server
    component: config
    example: "true"
type: Opaque
data:
  # Example S3 credentials (replace with actual values)
  aws_access_key_id: "QUtJQUlPU0ZPRE5ON0VYQU1QTEU="  # AKIAIOSFODNN7EXAMPLE (example only)
  aws_secret_access_key: "d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBMRUtFWQ=="  # wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY (example only)

---
# Secret for TLS certificates (if using HTTPS)
apiVersion: v1
kind: Secret
metadata:
  name: mcp-image-server-tls
  labels:
    app: mcp-image-server
    component: tls
type: kubernetes.io/tls
data:
  tls.crt: ""  # Base64 encoded certificate
  tls.key: ""  # Base64 encoded private key

---
# Secret for image registry authentication (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: mcp-image-server-registry
  labels:
    app: mcp-image-server
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ""  # Base64 encoded Docker config JSON

---
# Generic secret for custom credentials
apiVersion: v1
kind: Secret
metadata:
  name: mcp-image-server-custom
  labels:
    app: mcp-image-server
    component: config
    type: custom
type: Opaque
data:
  # Custom API keys or tokens
  api_key: ""  # Base64 encoded API key
  webhook_token: ""  # Base64 encoded webhook token
  encryption_key: ""  # Base64 encoded encryption key

---
# Instructions for creating secrets manually
# 
# 1. Create S3 credentials secret:
# kubectl create secret generic mcp-image-server-secrets \
#   --from-literal=aws_access_key_id=YOUR_ACCESS_KEY \
#   --from-literal=aws_secret_access_key=YOUR_SECRET_KEY \
#   --namespace=default
#
# 2. Create TLS secret from certificate files:
# kubectl create secret tls mcp-image-server-tls \
#   --cert=path/to/tls.crt \
#   --key=path/to/tls.key \
#   --namespace=default
#
# 3. Create registry secret for private container registry:
# kubectl create secret docker-registry mcp-image-server-registry \
#   --docker-server=your-registry-server \
#   --docker-username=your-username \
#   --docker-password=your-password \
#   --docker-email=your-email \
#   --namespace=default
#
# 4. Label secrets for easier management:
# kubectl label secret mcp-image-server-secrets app=mcp-image-server

---
# SealedSecret template (if using Bitnami SealedSecrets)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: mcp-image-server-secrets-sealed
  namespace: default
  labels:
    app: mcp-image-server
spec:
  encryptedData:
    # Generate using: echo -n "your-secret" | kubeseal --raw --from-file=/dev/stdin --namespace=default --name=mcp-image-server-secrets-sealed
    aws_access_key_id: ""  # Sealed/encrypted value
    aws_secret_access_key: ""  # Sealed/encrypted value
  template:
    metadata:
      name: mcp-image-server-secrets
      namespace: default
      labels:
        app: mcp-image-server
    type: Opaque

---
# External Secrets Operator template (if using External Secrets)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: mcp-image-server-store
  namespace: default
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: mcp-image-server-external-secrets

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mcp-image-server-external
  namespace: default
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: mcp-image-server-store
    kind: SecretStore
  target:
    name: mcp-image-server-secrets
    creationPolicy: Owner
  data:
  - secretKey: aws_access_key_id
    remoteRef:
      key: mcp-image-server/s3
      property: access_key_id
  - secretKey: aws_secret_access_key
    remoteRef:
      key: mcp-image-server/s3
      property: secret_access_key

---
# Vault template (if using HashiCorp Vault)
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultAuth
metadata:
  name: mcp-image-server-auth
  namespace: default
spec:
  method: kubernetes
  mount: kubernetes
  kubernetes:
    role: mcp-image-server
    serviceAccount: mcp-image-server

---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  name: mcp-image-server-vault
  namespace: default
spec:
  type: kv-v2
  mount: secret
  path: mcp-image-server/s3
  refreshAfter: 3600s  # 1 hour
  destination:
    name: mcp-image-server-secrets
    create: true
  vaultAuthRef: mcp-image-server-auth

---
# Script to generate secrets with proper base64 encoding
# Save this as a script file (not applied to Kubernetes)
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-image-server-secret-generator
  labels:
    app: mcp-image-server
    component: scripts
data:
  generate-secrets.sh: |
    #!/bin/bash
    set -e
    
    echo "Generating secrets for MCP Image Server..."
    
    # Check if kubectl is available
    if ! command -v kubectl &> /dev/null; then
        echo "kubectl not found. Please install kubectl first."
        exit 1
    fi
    
    # Get namespace (default to 'default')
    NAMESPACE=${1:-default}
    
    # Prompt for S3 credentials
    read -p "Enter AWS Access Key ID: " AWS_ACCESS_KEY_ID
    read -s -p "Enter AWS Secret Access Key: " AWS_SECRET_ACCESS_KEY
    echo
    
    # Create the secret
    kubectl create secret generic mcp-image-server-secrets \
        --from-literal=aws_access_key_id="$AWS_ACCESS_KEY_ID" \
        --from-literal=aws_secret_access_key="$AWS_SECRET_ACCESS_KEY" \
        --namespace="$NAMESPACE" \
        --dry-run=client -o yaml | kubectl apply -f -
    
    # Label the secret
    kubectl label secret mcp-image-server-secrets \
        app=mcp-image-server \
        component=config \
        --namespace="$NAMESPACE"
    
    echo "Secret created successfully in namespace: $NAMESPACE"
    
    # Verify the secret
    echo "Verifying secret..."
    kubectl get secret mcp-image-server-secrets -n "$NAMESPACE" -o jsonpath='{.data}' | jq -r 'keys[]'
    
    echo "Done!"